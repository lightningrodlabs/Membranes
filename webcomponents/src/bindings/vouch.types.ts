/* This file is generated by zits. Do not edit manually */

import {
/** types.ts */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
ExternalHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchPoolInfo,
/** hdk/action.ts */
SignedActionHashed,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
GrantedFunctionsType,
GrantedFunctions,
ZomeCallCapGrant,
CapAccess,
CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** api/admin/types.ts */
InstalledAppInfoStatus,
DeactivationReason,
DisabledAppReason,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

/**  */
export interface ThresholdType {
  name: string
  zomeName: string
}

/**  */
export interface MembraneCrossedClaim {
  proofAhs: ActionHash[]
  membraneEh: EntryHash
  subject: AgentPubKey
}

/**  */
export interface RoleClaim {
  subject: AgentPubKey
  membraneIndex: number
  roleEh: EntryHash
  membraneClaimEh: EntryHash
}

/**  */
export interface MembraneRole {
  name: string
  privileges: Privilege[]
  enteringMembraneEhs: EntryHash[]
}

/**  */
export interface Membrane {
  thresholdEhs: EntryHash[]
}

export interface SignedActionHash {
  ah: ActionHash
  signature: Signature
}

export interface MembraneThreshold {
  typeName: string
  data: Uint8Array
}

/**  */
export interface ThresholdReachedProof {
  thresholdEh: EntryHash
  signedAhs: SignedActionHash[]
}

export type CrudType =
  | {Create: null} | {Read: null} | {Update: null} | {Delete: null};
export enum CrudTypeType {
	Create = 'Create',
	Read = 'Read',
	Update = 'Update',
	Delete = 'Delete',
}

export interface Privilege {
  entry_def: AppEntryDef
  crud: string
}

export interface HasRoleInput {
  subject: AgentPubKey
  roleEh: EntryHash
}

export interface ClaimRoleInput {
  subject: AgentPubKey
  roleEh: EntryHash
  membraneIndex: number
}

export interface MembraneInput {
  subject: AgentPubKey
  membraneEh: EntryHash
}

export interface ClaimThresholdInput {
  subject: AgentPubKey
  threshold: MembraneThreshold
}

export const VOUCH_THRESHOLD_NAME = "Vouch";

export interface Vouch {
  subject: AgentPubKey
  forRole: string
}

export interface VouchThreshold {
  requiredCount: number
  byRole: string
  forRole: string
}

export enum VouchThresholdEntryType {
	VouchProof = 'VouchProof',
	Vouch = 'Vouch',
}
export type VouchThresholdEntryVariantVouchProof = {VouchProof: ThresholdReachedProof}
export type VouchThresholdEntryVariantVouch = {Vouch: Vouch}
export type VouchThresholdEntry = 
 | VouchThresholdEntryVariantVouchProof | VouchThresholdEntryVariantVouch;
