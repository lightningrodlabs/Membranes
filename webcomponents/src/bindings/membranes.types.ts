/* This file is generated by zits. Do not edit manually */

import {
/** Types */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
HoloHashed,
NetworkInfo,
FetchQueueInfo,
/** Action */
SignedActionHashed,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** Capabilities */
CapSecret,
CapClaim,
ZomeCallCapGrant,
CapAccess,
CapGrant,
GrantedFunctionsType,
/** CounterSigning */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** DhtOps */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** Entry */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** Record */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** admin types */
InstalledAppInfoStatus,
StemCell,
Cell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

export interface Vouch {
  subject: AgentPubKey
  forRole: string
}

/**  */
export interface MembraneCrossedClaim {
  proofs: ThresholdReachedProof[]
  membraneEh: EntryHash
  subject: AgentPubKey
}

/**  */
export interface RoleClaim {
  subject: AgentPubKey
  membraneIndex: number
  roleEh: EntryHash
  membraneClaimEh: EntryHash
}

/**  */
export interface MembraneRole {
  name: string
  privileges: Privilege[]
  enteringMembraneEhs: EntryHash[]
}

/**  */
export interface Membrane {
  thresholdEhs: EntryHash[]
}

export enum MembraneThresholdType {
	CreateEntryCount = 'CreateEntryCount',
	Vouch = 'Vouch',
	Progenitor = 'Progenitor',
}
export type MembraneThresholdVariantCreateEntryCount = {createEntryCount: CreateEntryCountThreshold}
export type MembraneThresholdVariantVouch = {vouch: VouchThreshold}
export type MembraneThresholdVariantProgenitor = {progenitor: null}
export type MembraneThreshold = 
 | MembraneThresholdVariantCreateEntryCount | MembraneThresholdVariantVouch | MembraneThresholdVariantProgenitor;

export interface MyAppEntryType {
  entryIndex: number
  zomeIndex: number
  isPublic: boolean
}

export interface CreateEntryCountThreshold {
  entryType: MyAppEntryType
  requiredCount: number
}

export interface VouchThreshold {
  requiredCount: number
  byRole: string
  forRole: string
}

/**  */
export interface ThresholdReachedProof {
  thresholdEh: EntryHash
  signedActions: SignedActionHashed[]
}

export type CrudType =
  | {Create: null} | {Read: null} | {Update: null} | {Delete: null};

export interface Privilege {
  entry_def: AppEntryDef
  crud: string
}

export interface GetCreateCountInput {
  subject: AgentPubKey
  entryType: MyAppEntryType
}

export interface HasRoleInput {
  subject: AgentPubKey
  roleEh: EntryHash
}

export interface ClaimRoleInput {
  subject: AgentPubKey
  roleEh: EntryHash
  membraneIndex: number
}

export interface MembraneInput {
  subject: AgentPubKey
  membraneEh: EntryHash
}

export enum MembranesEntryType {
	Threshold = 'Threshold',
	Membrane = 'Membrane',
	MembraneCrossedClaim = 'MembraneCrossedClaim',
	Role = 'Role',
	RoleClaim = 'RoleClaim',
	Vouch = 'Vouch',
}
export type MembranesEntryVariantThreshold = {Threshold: MembraneThreshold}
export type MembranesEntryVariantMembrane = {Membrane: Membrane}
export type MembranesEntryVariantMembraneCrossedClaim = {MembraneCrossedClaim: MembraneCrossedClaim}
export type MembranesEntryVariantRole = {Role: MembraneRole}
export type MembranesEntryVariantRoleClaim = {RoleClaim: RoleClaim}
export type MembranesEntryVariantVouch = {Vouch: Vouch}
export type MembranesEntry = 
 | MembranesEntryVariantThreshold | MembranesEntryVariantMembrane | MembranesEntryVariantMembraneCrossedClaim | MembranesEntryVariantRole | MembranesEntryVariantRoleClaim | MembranesEntryVariantVouch;

export interface MembraneZomeProperties {
  progenitors: AgentPubKeyB64[]
}
