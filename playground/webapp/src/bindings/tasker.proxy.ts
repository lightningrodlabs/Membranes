/* This file is generated by zits. Do not edit manually */

import {TaskerEntry, TaskerLinkType, CreateTaskItemInput, TaskList, TaskItem, } from './tasker.types';
import {
/** types.ts */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchQueueInfo,
/** hdk/action.ts */
SignedActionHashed,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
ZomeCallCapGrant,
CapAccess,
CapGrant,
GrantedFunctionsType,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** api/admin/types.ts */
InstalledAppInfoStatus,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

import {ZomeProxy} from '@ddd-qc/lit-happ';
import {taskerFunctionNames} from './tasker.fn';

/**
 *
 */
export class TaskerProxy extends ZomeProxy {
  static readonly DEFAULT_ZOME_NAME = "zTasker"
  static readonly FN_NAMES = taskerFunctionNames
 



  async createTaskList(title: string): Promise<ActionHash> {
    return this.call('create_task_list', title);
  }

  async createTaskItem(input: CreateTaskItemInput): Promise<ActionHash> {
    return this.call('create_task_item', input);
  }

  async completeTask(taskEh: EntryHash): Promise<ActionHash> {
    return this.call('complete_task', taskEh);
  }

  async isListLocked(listEh: EntryHash): Promise<boolean> {
    return this.call('is_list_locked', listEh);
  }

  async getTaskItem(eh: EntryHash): Promise<[TaskItem, boolean] | null> {
    return this.call('get_task_item', eh);
  }

  async getListItems(listEh: EntryHash): Promise<[EntryHash, TaskItem, boolean][]> {
    return this.call('get_list_items', listEh);
  }

  async getAllLists(): Promise<[EntryHash, TaskList][]> {
    return this.call('get_all_lists', null);
  }

  async membranedLockTaskList(listEh: EntryHash): Promise<ActionHash> {
    return this.call('membraned_lock_task_list', listEh);
  }

}
